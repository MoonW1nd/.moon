snippet /* "documentation block"
/**
 * $1
 */
endsnippet

snippet todo "do this later"
/**
 * @todo [MoonW1nd]: $1
 */
endsnippet

snippet tsi "TS ignore"
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
endsnippet

snippet cl "console.log"
console.log(${VISUAL}$1);
endsnippet

snippet cld "console.log with desc"
// eslint-disable-next-line prettier/prettier
console.log(
	'\n\n>>>>>>\n\n$1:\n',
	${1:logme},
	'\n\n<<<<<<\n\n'
);
endsnippet

snippet clo "console.log object"
// eslint-disable-next-line prettier/prettier
console.log(
	'\n\n>>>>>>\n\n$1:\n',
	JSON.stringify(${1:logme}, null, 2),
	'\n\n<<<<<<\n\n'
);
endsnippet

snippet iif "ignore the whole file"
/* istanbul ignore file */
endsnippet

snippet iin "ignore the next thing"
/* istanbul ignore next */
endsnippet

snippet iife "ignore the whole file (experiment desc)"
/* istanbul ignore file: напишем тест, если решим раскатить эксперимент */
endsnippet

snippet iine "ignore the next thing (experiment desc)"
/* istanbul ignore next: напишем тест, если решим раскатить эксперимент */
endsnippet

snippet ednl "eslint-disable-next-line comment"
// eslint-disable-next-line ${0:rule-name}
endsnippet

snippet ed "export default"
export default ${0:exported-entity};
endsnippet

snippet ir "import React"
import React from 'react';
endsnippet

snippet is "import styles"
import styles from './styles.module.css';
endsnippet

snippet icn "import classnames"
import cn from 'classnames';
endsnippet

# Expand styles
snippet "([\w]+)\.st" "style (postfix)" r
styles.`!p snip.rv = match.group(1)`$0
endsnippet

# Expand console.log
snippet "([\w\.]+)\.log" "console.log(postfix)" r
console.log(`!p snip.rv = match.group(1)`)$0
endsnippet

# Expand cn
snippet "([\w\.]+)\.cn" "cn (postfix)" r
cn(`!p snip.rv = match.group(1)`)$0
endsnippet

snippet cN "className"
className$0
endsnippet

snippet oC "onClick"
onClick$0
endsnippet

snippet rget "create ramda geter"
const get`!p snip.rv=t[1].capitalize()` = prop('$1');
endsnippet

snippet afn "create function"
const ${1:name} = (${2:args}) => {
	${VISUAL}$0
}
endsnippet

snippet if "if statement"
if (${1: condition}) {
	${VISUAL}$0
}
endsnippet

snippet s "styles."
styles.$0
endsnippet

snippet cn "cn wrapper"
cn(${VISUAL}$0)
endsnippet

snippet rc "React component"
import React from 'react';

type Props = {
	className?: string;
}

const ${1:name} = ({className}: Props): JSX.Element => (
	${2: code}
)

export default $1;
endsnippet

snippet ma "metrica Action"
export const METRIKA_$1 = "METRIKA_$1";
endsnippet

snippet ma "metrica Action"
export const METRIKA_$1 = "METRIKA_$1";
endsnippet
